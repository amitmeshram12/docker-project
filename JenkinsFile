pipeline {

     agent any

      tools {
       maven "Maven3"
       jdk "JDK11"
     }
     environment {
        DOCKER_IMAGE = 'amitmeshram/vprofileapp'
        DOCKER_TAG = 'latest'
     }
    stages {
           stage('Cleanup Workspace') {
                steps {
                  cleanWs()
              }
            }
            stage('Fetch Code') {
              steps {
                git credentialsId: 'Github', url: 'https://github.com/amitmeshram12/docker-project.git'
              }

            }
            stage('Unit Test') {
                 steps {
                     sh 'mvn test'
                 }
            }
            stage('Integration Test') {
                 steps {
                     sh 'mvn checkstyle:checkstyle'
                    }
                post {
                    success {
                          echo 'Generated Analysis Result'
                    }
                }
            }
            stage ("Code Analysis With Sonar") {
              steps {
                script {
                    withSonarQubeEnv(credentialsId: 'SonarCred') {
                    sh 'mvn clean package sonar:sonar'
                   } 
                }        
            }
        }    
        stage('Quality Gate') {
                steps {
                     timeout(time: 10, unit: 'MINUTES') {
                       waitForQualityGate abortPipeline: true
                    }    
                }
            }   
           stage('Nexus ArtifactUploder') {
                steps {
                  nexusArtifactUploader artifacts: 
                  [
                      [
                          artifactId: 'vprofile', 
                          classifier: '', 
                          file: 'target/vprofile-v2.war', 
                          type: 'war'
                      ]
                  ], 
                  credentialsId: 'NexusCred',
                  groupId: 'QA', 
                  nexusUrl: '192.168.245.141:8081',
                  nexusVersion: 'nexus3', 
                  protocol: 'http', 
                  repository: 'vprofile-app', 
                  version: "${env.BUILD_ID}-${env.BUILD_TIMESTAMP}"
                  }
            }    
           stage('Build App Image') {
               steps {
                   script {
                       docker.build( DOCKER_IMAGE + ":$DOCKER_TAG", "./Docker-files/app/")
                     }
                   }
                }
           stage('Push Docker Image') {
            steps {
                script {
                    // Log in to DockerHub
                    docker.withRegistry('https://registry.hub.docker.com', 'DockerHub') {
                        // Push Docker image to DockerHub
                        docker.image("${DOCKER_IMAGE}:${DOCKER_TAG}").push()
                        }
                    }
                }
            }
           stage ("Trivy image scan") {
            steps {
                script {
                    sh "trivy image --timeout 10m --format=json $DOCKER_IMAGE:$DOCKER_TAG"
                    }
                  }
                }
           stage ("CleanUp Artifact") {
               steps{
                   script {
                       sh "docker rmi $DOCKER_IMAGE:$DOCKER_TAG"
                       }
                    }
                }
            }
        }