pipeline {

     agent any

      tools {
       maven "Maven3"
       jdk "JDK11"
     }
     environment {
        DOCKER_IMAGE = 'amitmeshram/vprofileapp'
        DOCKER_TAG = 'latest'
     }
    stages {
           stage('Cleanup Workspace') {
                steps {
                  cleanWs()
              }
            }
            stage('Fetch Code') {
              steps {
                git credentialsId: 'Github', url: 'https://github.com/amitmeshram12/docker-project.git'
              }

            }
            stage('Unit Test') {
                 steps {
                     sh 'mvn test'
                 }
            }
            stage('Integration Test') {
                 steps {
                     sh 'mvn checkstyle:checkstyle'
                    }
                post {
                    success {
                          echo 'Generated Analysis Result'
                    }
                }
            }
            stage('Build $$ ANALYSIS with SONARQUBE') {
                steps {
                script {
                    withSonarQubeEnv(credentialsId: 'sonarcred') {
                    sh 'mvn clean package sonar:sonar'
                    }
                  }
                }
            }
            stage("Quality Gate") {
            steps {
                timeout(time: 10, unit: 'MINUTES') {
               waitForQualityGate abortPipeline: true
                    }
                }
            }
           stage('Build App Image') {
               steps {
                   script {
                       docker.build( DOCKER_IMAGE + ":$DOCKER_TAG", "./Docker-files/app/")
                     }
                   }
                }
           stage('Push Docker Image') {
            steps {
                script {
                    // Log in to DockerHub
                    docker.withRegistry('https://registry.hub.docker.com', 'Dockerhub') {
                        // Push Docker image to DockerHub
                        docker.image("${DOCKER_IMAGE}:${DOCKER_TAG}").push()
                        }
                    }
                }
            }
           stage ("Trivy image scan") {
            steps {
                script {
                    sh "trivy image --timeout 10m --format=json $DOCKER_IMAGE:$DOCKER_TAG"
                    }
                  }
                }
           stage ("CleanUp Artifact") {
               steps{
                   script {
                       sh "docker rmi $DOCKER_IMAGE:$DOCKER_TAG"
                       }
                    }
                }
            }
        }